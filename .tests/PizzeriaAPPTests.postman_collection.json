{
	"info": {
		"_postman_id": "3e61b566-3ac7-4522-8c38-da2a61c0ae83",
		"name": "PizzeriaAPPTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Menu Tests",
			"item": [
				{
					"name": "POST an item to Menu 201 status code and received correct JSON response",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"MenuID\", jsonData.MenuID);\r",
									"pm.test(\"Test POST Menu item\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.Category).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.Name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.MenuID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.Price).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Pepperoni\",\r\n    \"Price\": 23,\r\n    \"Category\": \"Pizza\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/menu",
							"host": [
								"{{url}}"
							],
							"path": [
								"menu"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Menu endpoint 200 status code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test GET Menu\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/menu",
							"host": [
								"{{url}}"
							],
							"path": [
								"menu"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Menu item by MenuID 200 status code and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET Menu item by MenuID\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.Category).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.Name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.MenuID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.Price).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/menu/{{MenuID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"menu",
								"{{MenuID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH an item in Menu 200 status code and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test PATCH Menu item\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.Category).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.Name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.MenuID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.Price).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Changed\",\r\n    \"Price\": 50,\r\n    \"Category\": \"New category\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/menu/{{MenuID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"menu",
								"{{MenuID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE an item from Menu 204 status code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test DELETE Menu item\", function () {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/menu/{{MenuID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"menu",
								"{{MenuID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET an item from Menu with wrong MenuID 404 status code and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET Menu item with wrong MenuID\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"    pm.expect(jsonData.detail).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/menu/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"menu",
								"0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders Tests",
			"item": [
				{
					"name": "Additional preparation for later tests",
					"item": [
						{
							"name": "POST an item to Menu 201 status code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"MenuID\", jsonData.MenuID);\r",
											"pm.test(\"Additional test POST Menu item 201 status code\", function () {\r",
											"    pm.response.to.have.status(201)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Pepperoni\",\r\n    \"Price\": 23,\r\n    \"Category\": \"Pizza\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/menu",
									"host": [
										"{{url}}"
									],
									"path": [
										"menu"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST an item to Orders 201 status code and received correct JSON response",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"OrderID\", jsonData.OrderID);\r",
									"pm.test(\"Test POST Orders item\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.Comments).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.OrderID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.Email).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.TotalPrice).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Comments\": \"Test comment\",\r\n    \"Email\": \"test@email.com\",\r\n    \"OrderedItems\": [\r\n        {\r\n            \"MenuID\": {{MenuID}},\r\n            \"Quantity\": 1\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{url}}/orders",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Orders endpoint 200 status code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test GET Orders\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/orders",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Orders item by OrderID 200 status code and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET Orders item by OrderID\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.Comments).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.OrderID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.Email).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.TotalPrice).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/orders/{{OrderID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								"{{OrderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH an item in Orders 200 status code and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test PATCH Orders item\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.Comments).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.OrderID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.Email).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.TotalPrice).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Comments\": \"Test comment changed\",\r\n    \"Email\": \"test@changed.com\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/orders/{{OrderID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								"{{OrderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE an item from Orders 204 status code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test DELETE Orders item\", function () {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/orders/{{OrderID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								"{{OrderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET an item from Orders with wrong OrderID 404 status code and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET Order items with wrong OrderID\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"    pm.expect(jsonData.detail).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/orders/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								"0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OrderedItems Tests",
			"item": [
				{
					"name": "Additional preparation for later tests",
					"item": [
						{
							"name": "POST an item to Menu 201 status code Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"MenuID\", jsonData.MenuID);\r",
											"pm.test(\"Additional test POST Menu item 201 status code\", function () {\r",
											"    pm.response.to.have.status(201)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Pepperoni\",\r\n    \"Price\": 23,\r\n    \"Category\": \"Pizza\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/menu",
									"host": [
										"{{url}}"
									],
									"path": [
										"menu"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST an item to Orders 201 status code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"OrderID\", jsonData.OrderID);\r",
											"pm.test(\"Additional test POST Orders item 201 status code\", function () {\r",
											"    pm.response.to.have.status(201)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Comments\": \"Test comment\",\r\n    \"Email\": \"test@email.com\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/orders",
									"host": [
										"{{url}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST an item to OrderedItems 201 status code and received correct JSON response",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"OrderedItemID\", jsonData.OrderedItemID);\r",
									"pm.test(\"Test POST OrderedItems item\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.Quantity).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.MenuID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.OrderedItemID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.UnitPrice).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.OrderID).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"MenuID\": {{MenuID}},\r\n    \"OrderID\": {{OrderID}},\r\n    \"Quantity\": 5\r\n}"
						},
						"url": {
							"raw": "{{url}}/ordereditems",
							"host": [
								"{{url}}"
							],
							"path": [
								"ordereditems"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET OrderedItems endpoint 200 status code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test GET OrderedItems\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/ordereditems",
							"host": [
								"{{url}}"
							],
							"path": [
								"ordereditems"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET OrderedItems item by OrderedItemID status code 200 and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET OrderedItems by OrderedItemID\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.Quantity).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.MenuID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.OrderedItemID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.UnitPrice).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.OrderID).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/ordereditems/{{OrderedItemID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"ordereditems",
								"{{OrderedItemID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET OrderedItems item by OrderID status code 200 and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET OrderedItems by OrderID\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData[0].Quantity).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].MenuID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].OrderedItemID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].UnitPrice).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].OrderID).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/ordereditems/orderid/{{OrderID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"ordereditems",
								"orderid",
								"{{OrderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET OrderedItems item by MenuID status code 200 and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET OrderedItems by MenuID\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData[0].Quantity).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].MenuID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].OrderedItemID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].UnitPrice).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].OrderID).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/ordereditems/menuid/{{MenuID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"ordereditems",
								"menuid",
								"{{MenuID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH an item in OrderedItems 200 status code and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test PATCH OrderedItems item\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.Quantity).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.MenuID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.OrderedItemID).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.UnitPrice).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.OrderID).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"MenuID\": 18,\r\n    \"OrderID\": {{OrderID}},\r\n    \"Quantity\": 4,\r\n    \"UnitPrice\": 7\r\n}"
						},
						"url": {
							"raw": "{{url}}/ordereditems/{{OrderedItemID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"ordereditems",
								"{{OrderedItemID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE an item from OrderedItems 204 status code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test DELETE OrderedItems item\", function () {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/ordereditems/{{OrderedItemID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"ordereditems",
								"{{OrderedItemID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET an item from OrderedItems with wrong OrderedItemID 404 status code and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET OrderedItems item with wrong OrderedItemID\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"    pm.expect(jsonData.detail).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/ordereditems/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"ordereditems",
								"0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Other Tests (more complex)",
			"item": [
				{
					"name": "TotalPrice correct calculation tests",
					"item": [
						{
							"name": "TotalPrice test for value to be equal 0 after initial empty Order creation",
							"item": [
								{
									"name": "Additional preparation for later tests",
									"item": [
										{
											"name": "POST an item to Orders (with no initial OrderedItems) 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"OrderID\", jsonData.OrderID);\r",
															"pm.test(\"Additional test POST Orders item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Comments\": \"Test comment\",\r\n    \"Email\": \"test@email.com\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/orders",
													"host": [
														"{{url}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Orders item by OrderID assert initial TotalPrice equal 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test GET Orders item by OrderID\", function () {\r",
													"    pm.expect(jsonData.TotalPrice).to.be.equal(0)\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/orders/{{OrderID}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"orders",
												"{{OrderID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "TotalPrice test after initial non-empty Order creation",
							"item": [
								{
									"name": "Additional preparation for later tests",
									"item": [
										{
											"name": "POST an item to Menu 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"MenuID\", jsonData.MenuID);\r",
															"pm.test(\"Additional test POST Menu item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Pepperoni\",\r\n    \"Price\": 23,\r\n    \"Category\": \"Pizza\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/menu",
													"host": [
														"{{url}}"
													],
													"path": [
														"menu"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST an item to Orders (with initial OrderedItems with Price equal 46) 201 status code Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"OrderID\", jsonData.OrderID);\r",
															"pm.test(\"Additional test POST Orders item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Comments\": \"Test comment\",\r\n    \"Email\": \"test@email.com\",\r\n    \"OrderedItems\": [\r\n        {\r\n            \"MenuID\": {{MenuID}},\r\n            \"Quantity\": 2\r\n        }\r\n    ]\r\n}"
												},
												"url": {
													"raw": "{{url}}/orders",
													"host": [
														"{{url}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Orders item by OrderID assert initial TotalPrice equal 46",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test GET Orders item by OrderID\", function () {\r",
													"    pm.expect(jsonData.TotalPrice).to.be.equal(46)\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/orders/{{OrderID}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"orders",
												"{{OrderID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "TotalPrice test after adding items to Order",
							"item": [
								{
									"name": "Additional preparation for later tests",
									"item": [
										{
											"name": "POST an item to Menu 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"MenuID\", jsonData.MenuID);\r",
															"pm.test(\"Additional test POST Menu item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Pepperoni\",\r\n    \"Price\": 23,\r\n    \"Category\": \"Pizza\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/menu",
													"host": [
														"{{url}}"
													],
													"path": [
														"menu"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST an item to Orders (with no initial OrderedItems) 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"OrderID\", jsonData.OrderID);\r",
															"pm.test(\"Test POST Orders item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Comments\": \"Test comment\",\r\n    \"Email\": \"test@email.com\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/orders",
													"host": [
														"{{url}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST an item to OrderedItems 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"OrderedItemID\", jsonData.OrderedItemID);\r",
															"pm.test(\"Additional test POST OrderedItems item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"MenuID\": {{MenuID}},\r\n    \"OrderID\": {{OrderID}},\r\n    \"Quantity\": 2\r\n}"
												},
												"url": {
													"raw": "{{url}}/ordereditems",
													"host": [
														"{{url}}"
													],
													"path": [
														"ordereditems"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Orders item by OrderID assert initial TotalPrice equal 46",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test GET Orders item by OrderID\", function () {\r",
													"    pm.expect(jsonData.TotalPrice).to.be.equal(46)\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/orders/{{OrderID}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"orders",
												"{{OrderID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "TotalPrice test after editing item UnitPrice",
							"item": [
								{
									"name": "Additional preparation for later tests",
									"item": [
										{
											"name": "POST an item to Menu 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"MenuID\", jsonData.MenuID);\r",
															"pm.test(\"Additional test POST Menu item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Pepperoni\",\r\n    \"Price\": 23,\r\n    \"Category\": \"Pizza\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/menu",
													"host": [
														"{{url}}"
													],
													"path": [
														"menu"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST an item to Orders (with no initial OrderedItems) 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"OrderID\", jsonData.OrderID);\r",
															"pm.test(\"Test POST Orders item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Comments\": \"Test comment\",\r\n    \"Email\": \"test@email.com\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/orders",
													"host": [
														"{{url}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST an item to OrderedItems 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/* This seemingly unnecessary step (we could post an Order with initial OrderItems instead of doing it in two steps) \r",
															"is actually neccessary to easly get and store OrderedItemID for later to do a PATCH request on this exact OrderedItem */\r",
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"OrderedItemID\", jsonData.OrderedItemID);\r",
															"pm.test(\"Additional test POST OrderedItems item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"MenuID\": {{MenuID}},\r\n    \"OrderID\": {{OrderID}},\r\n    \"Quantity\": 2\r\n}"
												},
												"url": {
													"raw": "{{url}}/ordereditems",
													"host": [
														"{{url}}"
													],
													"path": [
														"ordereditems"
													]
												}
											},
											"response": []
										},
										{
											"name": "PATCH an item in OrderedItems 200 status code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.test(\"Additional test PATCH OrderedItems item 200 status code\", function () {\r",
															"    pm.response.to.have.status(200)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"MenuID\": {{MenuID}},\r\n    \"OrderID\": {{OrderID}},\r\n    \"Quantity\": 5,\r\n    \"UnitPrice\": 20\r\n}"
												},
												"url": {
													"raw": "{{url}}/ordereditems/{{OrderedItemID}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"ordereditems",
														"{{OrderedItemID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Orders item by OrderID assert TotalPrice after PATCH equal 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test GET Orders item by OrderID\", function () {\r",
													"    pm.expect(jsonData.TotalPrice).to.be.equal(100)\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/orders/{{OrderID}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"orders",
												"{{OrderID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "TotalPrice test for value to be equal 0 after deleting all items from Order",
							"item": [
								{
									"name": "Additional preparation for later tests",
									"item": [
										{
											"name": "POST an item to Menu 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"MenuID\", jsonData.MenuID);\r",
															"pm.test(\"Additional test POST Menu item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Pepperoni\",\r\n    \"Price\": 23,\r\n    \"Category\": \"Pizza\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/menu",
													"host": [
														"{{url}}"
													],
													"path": [
														"menu"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST an item to Orders (with no initial OrderedItems) 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"OrderID\", jsonData.OrderID);\r",
															"pm.test(\"Test POST Orders item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Comments\": \"Test comment\",\r\n    \"Email\": \"test@email.com\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/orders",
													"host": [
														"{{url}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST an item to OrderedItems 201 status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/* This seemingly unnecessary step (we could post an Order with initial OrderItems instead of doing it in two steps) \r",
															"is actually neccessary to easly get and store OrderedItemID for later to do a PATCH request on this exact OrderedItem */\r",
															"const jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"OrderedItemID\", jsonData.OrderedItemID);\r",
															"pm.test(\"Additional test POST OrderedItems item 201 status code\", function () {\r",
															"    pm.response.to.have.status(201)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"MenuID\": {{MenuID}},\r\n    \"OrderID\": {{OrderID}},\r\n    \"Quantity\": 2\r\n}"
												},
												"url": {
													"raw": "{{url}}/ordereditems",
													"host": [
														"{{url}}"
													],
													"path": [
														"ordereditems"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE an item from OrderedItems 204 status code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Additional test DELETE OrderedItems item 204 status code\", function () {\r",
															"    pm.response.to.have.status(204)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/ordereditems/{{OrderedItemID}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"ordereditems",
														"{{OrderedItemID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Orders item by OrderID assert initial TotalPrice equal 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test GET Orders item by OrderID\", function () {\r",
													"    pm.expect(jsonData.TotalPrice).to.be.equal(0)\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/orders/{{OrderID}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"orders",
												"{{OrderID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "POST Menu item with not enough data 422 status code and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test POST Menu item with not enough data\", function () {\r",
									"    pm.response.to.have.status(422)\r",
									"    pm.expect(jsonData.detail[0].msg).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.detail[0].type).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Not enough data\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/menu",
							"host": [
								"{{url}}"
							],
							"path": [
								"menu"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Orders item with long text as a comment 201 status code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test POST Orders item with long text as a comment\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Comments\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus at elit risus. Nulla et consectetur felis. Cras quis ultricies lacus. Fusce vulputate est risus, nec gravida enim sagittis vel. Duis ligula magna, finibus nec est sed, cursus sodales purus. In ut diam eget dui sollicitudin semper. Morbi sodales mi sed est tempor condimentum. Vivamus a porttitor ipsum. Ut ut iaculis augue. Quisque lacinia est ornare justo mollis feugiat. Sed hendrerit porta metus et tempor.\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/orders",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Menu item using None as values 422 code status and received correct JSON response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test POST Menu item using None as values\", function () {\r",
									"    pm.response.to.have.status(422)\r",
									"    pm.expect(jsonData.detail[0].msg).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.detail[0].type).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": None,\r\n    \"Price\": None,\r\n    \"Category\": None\r\n}"
						},
						"url": {
							"raw": "{{url}}/menu",
							"host": [
								"{{url}}"
							],
							"path": [
								"menu"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": ""
		},
		{
			"key": "MenuID",
			"value": ""
		},
		{
			"key": "OrderID",
			"value": ""
		},
		{
			"key": "OrderedItemID",
			"value": ""
		}
	]
}